/**
 * Custom options for the glitch animations.
 */
declare type PowerGlitchOptions = {
    /**
     * Image URL. Can be local, remote or a data URL. Needs to be set if glitching divs.
     */
    imageUrl?: string;
    /**
     * Background color. Use 'transparent' not to set a background color.
     */
    backgroundColor: string;
    /**
     * Whether to hide the glitch animation when it goes out of the bounding rectangle.
     */
    hideOverflow: boolean;
    /**
     * Timing of the animation.
     */
    timing: {
        /**
         * Duration of the animation loop in milliseconds.
         */
        duration: number;
        /**
         * Number of times the animation should repeat. Set to `Infinity` to repeat forever.
         */
        iterations: number;
        /**
         * Ease animation for all layers. Defauls to a sequential easing (no transition).
         */
        easing?: string;
    };
    /**
     * Specify if the animation should always glitch uniformly (if false) or if it should glitch at a given time.
     * If start and end are set, the animation will glitch between those two times, and the peak glitch will be at the middle.
     * glitchTimeSpan.end should be greater than glitchTimeSpan.start. Otherwise, the glitch will not happen.
     */
    glitchTimeSpan: false | {
        /**
         * Start time of the glitch in percent, between 0 and 1.
         */
        start: number;
        /**
         * End time of the glitch in percent, between 0 and 1.
         */
        end: number;
    };
    /**
     * Whether the base layer should shake. If not set to false, the base layer will shake in the given amplitude.
     * The shake animation respects the glitch time span constraint, if set.
     */
    shake: false | {
        /**
         * Number of steps to compute for each layer per second of animation.
         */
        velocity: number;
        /**
         * Max X amplitude for the shake animation.
         */
        amplitudeX: number;
        /**
         * Max Y amplitude for the shake animation.
         */
        amplitudeY: number;
    };
    /**
     * Slice layers are the base animation to give the glitch effect. They clip a part of the image and move it somewhere else.
     * If not set to false, the slice layers will be generated.
     * The slice animation respects the glitch time span constraint, if set.
     */
    slice: false | {
        /**
         * Number of layers to generate.
         */
        count: number;
        /**
         * Number of steps to compute for each layer per second of animation.
         */
        velocity: number;
        /**
         * Minimum height in percent for a given slice, between 0 and 1.
         */
        minHeight: number;
        /**
         * Maximum height in percent for a given slice, between 0 and 1.
         */
        maxHeight: number;
        /**
         * Whether the hue should rotate for the given slice.
         */
        hueRotate: boolean;
    };
};
/**
 * One layer to generate
 */
declare type LayerDefinition = {
    steps: {
        [cssPropertyName: string]: string;
    }[];
    timing: EffectTiming;
};
export declare const PowerGlitch: {
    glitch: (elOrSelector?: string | HTMLDivElement, userOptions?: Partial<PowerGlitchOptions>) => void;
    generateLayers: (options: PowerGlitchOptions) => LayerDefinition[];
    getDefaultOptions: () => PowerGlitchOptions;
};
export {};
